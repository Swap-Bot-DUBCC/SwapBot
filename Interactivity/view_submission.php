<?phprequire '../../etc/Env.php'; // Require the environmental variables file$err = ""; // Initialize error variable$msg = ""; // Initialize message variable// Define the common variables in all forms$shift = ucfirst($form_data['shift']['select_shift']['selected_option']['value']);$fecha = $form_data['date']['select_date']['selected_date'];$duty = strtoupper($form_data['duty']['input_duty']['value']); // Turn the duty into uppercaseswitch ($form_title) {    case "Request a day off":        // Connect to the database and prepare a statement        $conn = mysqli_connect($servername, $username, $password, $dbname);        $sql = "SELECT Crewcode, Rank FROM Crew WHERE UserID = ?";        $stmt_exists = mysqli_prepare($conn, $sql);        mysqli_stmt_bind_param($stmt_exists, "s", $user_id);        mysqli_stmt_execute($stmt_exists);        $result_exists = mysqli_stmt_get_result($stmt_exists);        while ($row = mysqli_fetch_assoc($result_exists)) {            $crewcode = $row['Crewcode'];            $rank = $row['Rank'];        }        mysqli_stmt_close($stmt_exists);        // Check what rank is the person, and define the radio buttons in consequence        switch ($rank) {            case "JU (NEW)":            case "JU":                $comments = "";                break;            case "JU (AH)":            case "JU (PU)":                $pu = $form_data['PU']['radio_buttons-action']['selected_option']['value'];                if (!empty($pu)) {                    switch ($pu) {                        case "yes":                            $comments = "No.1";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select if it's a 'PU' flight";                }                break;            case "PU (TC)":            case "PU":            case "PU (DS)":            case "PU (BS)":            case "PU (LC)":            case "PU (TH. INS)":            case "PU (INS)":            case "PU (SEP)":                $lck = $form_data['LCK']['radio_buttons-action']['selected_option']['value'];                if (!empty($lck)) {                    switch ($lck) {                        case "iclck":                            $err .= "You're not allowed to ask for a swap if you're performing a CLCK";                            // $comments = "ICLCK";                            break;                        case "ilck":                            $err .= "You're not allowed to ask for a swap if you're performing a LCK";                            // $comments = "ILCK";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select whether it's a ILCK, ICLCK or none";                }                break;        }        // Check the date is within range        $fechap = explode("-", $fecha);        $yy = $fechap[0];        $mm = $fechap[1];        $dd = $fechap[2];        $rosterlimitepoch = mktime(12, 0, 0, date("m"), date("d") + 30, date("y"));        $swaprequestepoch = mktime(12, 0, 0, $mm, $dd, $yy);        $swapnotedepoch = mktime(12, 0, 0, date("m"), date("d") + 12, date("y"));        $swaplimitbsepoch = mktime(12, 0, 0, date("m"), date("d") + 6, date("y"));        $todayepoch = mktime(12, 0, 0, date("m"), date("d"), date("y"));        switch (true) {            case ($swaprequestepoch >= $rosterlimitepoch): // If the date is +30 days                $err .= "It is too soon for the day you have requested. Please try again at a later time";                break;            case (($rosterlimitepoch > $swaprequestepoch) && ($swaprequestepoch > $swapnotedepoch)): // If the date is between 13 and 30 days from now                break;            case (($swaprequestepoch < $swapnotedepoch) && ($swaprequestepoch >= $swaplimitbsepoch)): // If the date is between 6 and 12 days from today                $err .= "\nIt might be too late for a swap. Please contact your Base Supervisor / Crew Control";                break;            case (($swaprequestepoch < $swaplimitbsepoch) && ($swaprequestepoch > $todayepoch)): // If the date is less than 6 days from today                $err .= "\nIt is too late for a swap";                break;            case ($swaprequestepoch < $todayepoch): // The date being in the past                $err .= "\nWhy do you put a date in the past?";                break;        }        // Check if the duty is valid        $dutysplits = explode("/", $duty, 3); // Separate the airports into their 3 letter codes, using the slashes (/) as a delimiter        foreach ($dutysplits as $airportcheck) {            $airportcheck = strtoupper($airportcheck); // Turn them into uppercase letters            switch ($airportcheck) {                case "UNKNOWN": // You don't know the duty yet. In this case you'll still be allowed to process the swap, but if the date shows in the roster and the request is not updated, it will be deleted.                    $msg = "Your duty is unknown for the moment. Please remember to update this as soon as possible. Otherwise, your request will be deleted.";                case "HSBY": // It's a hsby, either earlies or lates.                case "AD": //It's an Airport Duty                    goto SkipDutyOff;            }            $sqlinsert = "INSERT INTO Airport_Check VALUES (?)"; // Create the query            $stmt = mysqli_prepare($conn, $sqlinsert);            mysqli_stmt_bind_param($stmt, "s", $airportcheck);            mysqli_stmt_execute($stmt);        }        unset($dutysplits, $airportcheck); // Unset the references for the next person who runs the script        mysqli_stmt_close($stmt);        // All values have been introduced into the temporary table        $sqlcompare = "SELECT Airport_Check.AirportCode AS AirportCode, CASE WHEN Airports.AirportCode IS NULL THEN 'Not valid' ELSE 'Valid' END AS Valid FROM Airport_Check LEFT JOIN Airports ON Airport_Check.AirportCode = Airports.AirportCode";        $result_compare = mysqli_query($conn, $sqlcompare); // Run the comparison        while ($row = mysqli_fetch_assoc($result_compare)) {            if ($row["Valid"] != 'Valid') {                $err .= "\n" . $row["AirportCode"] . " is an invalid airport :warning:"; // Display an error if the airport introduced isn't valid            }        }        $sqldel = "DELETE FROM Airport_Check"; // Delete the requests for checking whether the airports were valid or not        mysqli_query($conn, $sqldel);        SkipDutyOff:        /* DEBUG OUTPUT          $debug_array = Array (          'Crewcode' => $crewcode,          'Fecha' => $fecha,          'Duty' => $duty,          'Comments' => $comments,          'Command' => 'Request',          'Shift' => $shift,          'Rank' => $rank,          'UserID' => $user_id,          );          $debug_string = print_r($debug_array, TRUE);          $debug_string .= "\n" . $err;          file_put_contents("TestOutput.txt", $debug_string);         */        // Insert the values into the 'Swaps' table        if (empty($err)) {            $sql = "INSERT INTO Swaps VALUES (?, ?, ?, ?, 'Request_Off', ?, ?, ?, '00:00', '')";            $stmt = mysqli_prepare($conn, $sql);            mysqli_stmt_bind_param($stmt, "sssssss", $crewcode, $fecha, $duty, $comments, $shift, $rank, $user_id);            mysqli_stmt_execute($stmt);            if (mysqli_stmt_affected_rows($stmt) < 1) {                $message = [                    'channel' => $user_id,                    'text' => "Your query was not processed because of the following error.\n" . mysqli_error($conn),                ];            } else {                $msg .= "\nYour request was successfully created :simple_smile:";                $message = [                    'channel' => $user_id,                    'text' => $msg                ];                mysqli_stmt_close($stmt); // Close the statement            }        } else {            $err .= "\nPlease correct the errors above and try again";            $message = [                'channel' => $user_id,                'text' => $err            ];        }        $json = json_encode($message);        $slack_call = curl_init($slack_post_message);        curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");        curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json);        curl_setopt($slack_call, CURLOPT_CRLF, true);        curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);        curl_setopt($slack_call, CURLOPT_HTTPHEADER, [            "Content-Type: application/json",            "Authorization: Bearer " . $token,            "Content-Length: " . strlen($json)]        );        $result = curl_exec($slack_call); // Store the result, in case there's any errors        curl_close($slack_call); // Close the curl connection                // Close the connection        mysqli_close($conn);        unset($crewcode, $fecha, $duty, $comments, $shift, $rank, $user_id);        break;    case "Offer a swap":        // Check the rank of the person offering the swap        $conn = mysqli_connect($servername, $username, $password, $dbname);        $sql = "SELECT Crewcode, Rank FROM Crew WHERE UserID = ?";        $stmt = mysqli_prepare($conn, $sql);        mysqli_stmt_bind_param($stmt, "s", $user_id);        mysqli_stmt_execute($stmt);        $result_exists_1 = mysqli_stmt_get_result($stmt);        while ($row = mysqli_fetch_assoc($result_exists_1)) {            $crewcode = $row['Crewcode'];            $rank = $row['Rank'];        }        mysqli_stmt_close($stmt);                // Check the date and make sure it's within range        $fechap = explode("-", $fecha);        $yy = $fechap[0];        $mm = $fechap[1];        $dd = $fechap[2];        $rosterlimitepoch = mktime(12, 0, 0, date("m"), date("d") + 20, date("y"));        $swaprequestepoch = mktime(12, 0, 0, $mm, $dd, $yy);        $swapnotedepoch = mktime(12, 0, 0, date("m"), date("d") + 12, date("y"));        $swaplimitbsepoch = mktime(12, 0, 0, date("m"), date("d") + 6, date("y"));        $todayepoch = mktime(12, 0, 0, date("m"), date("d"), date("y"));        switch (true) {            case ($swaprequestepoch >= $swapnotedepoch): // If the date is +12 days                break;            case (($swaprequestepoch < $swapnotedepoch) && ($swaprequestepoch >= $swaplimitbsepoch)): // If the date is between 6 and 12 days from today                $err = "\nIt might be too late to offer a swap";                break;            case (($swaprequestepoch < $swaplimitbsepoch) && ($swaprequestepoch > $todayepoch)): // If the date is less than 6 days from today                $err = "\nIt is too late for a swap";                break;            default: // Any other case scenario, which is a date being in the past                $err = "\nWhy do you put a date in the past?";                break;        }                // Only thing we need to check is the shift, and it can only be two values (Earlies or Lates), so let's get right into this        if (empty($err)) {            $sql = "INSERT INTO Swaps VALUES (?, ?, 'OFF', '', 'Offer', ?, ?, ?, '00:00', '')";            $stmt = mysqli_prepare($conn, $sql);            mysqli_stmt_bind_param($stmt, "sssss", $crewcode, $fecha, $shift, $rank, $user_id);            mysqli_stmt_execute($stmt);            $stmt_rows = mysqli_stmt_affected_rows($stmt);            if ($stmt_rows > 0) {                $msg .= "\nYour offer was successfully created :simple_smile:";                $message = [                    'channel' => $user_id,                    'text' => $msg                ];                mysqli_stmt_close($stmt); // Close the statement            } else {                $msg = "Your request was not processed because of the following error:\n" . mysqli_stmt_errno($stmt);                if (isset($json_data_array)) { // Check if the scheduled message array is defined (the swap is for a perior further than 20 days)                    $slack_call = curl_init("https://slack.com/api/chat.scheduleMessage");                    curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");                    curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json_string);                    curl_setopt($slack_call, CURLOPT_CRLF, true);                    curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);                    curl_setopt($slack_call, CURLOPT_HTTPHEADER, [                        "Content-Type: application/json",                        "Authorization: Bearer " . $token,                        "Content-Length: " . strlen($json_string)]                    );                    $result = curl_exec($slack_call); // Store the result, in case there's any errors                    curl_close($slack_call); // Close the curl connection                }                $message = [                    'channel' => $user_id,                    'text' => $msg                ];                mysqli_stmt_close($stmt); // Close the statement */            }        } else {            $err .= "\nPlease correct the errors above and try again";            $message = [                'channel' => $user_id,                'text' => $err            ];        }        $json = json_encode($message);        $slack_call = curl_init($slack_post_message);        curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");        curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json);        curl_setopt($slack_call, CURLOPT_CRLF, true);        curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);        curl_setopt($slack_call, CURLOPT_HTTPHEADER, [            "Content-Type: application/json",            "Authorization: Bearer " . $token,            "Content-Length: " . strlen($json)]        );        $result = curl_exec($slack_call); // Store the result, in case there's any errors        curl_close($slack_call); // Close the curl connection        // Close the connection        mysqli_close($conn);        unset($crewcode, $fecha, $duty, $comments, $shift, $rank, $user_id);        break;    case "Request a shorter day":        /*  There's no necessity to check the time, because they can only choose from it.          However, we will still use parametrized queries when we deal with the database. */        $time = $form_data['time']['select_time']['selected_time'];        // Connect to the database and prepare a statement        $conn = mysqli_connect($servername, $username, $password, $dbname);        $sql = "SELECT Crewcode, Rank FROM Crew WHERE UserID = ?";        $stmt = mysqli_prepare($conn, $sql);        mysqli_stmt_bind_param($stmt, "s", $user_id);        mysqli_stmt_execute($stmt);        $result = mysqli_stmt_get_result($stmt);        while ($row = mysqli_fetch_assoc($result)) {            $crewcode = $row['Crewcode'];            $rank = $row['Rank'];        }        mysqli_stmt_close($stmt);                // Check what rank is the person, and define the radio buttons in consequence        switch ($rank) {            case "JU (NEW)":            case "JU":                break;            case "JU (AH)":            case "JU (PU)":                $pu = $form_data['PU']['radio_buttons-action']['selected_option']['value'];                if (!empty($pu)) {                    switch ($pu) {                        case "yes":                            $comments = "No.1";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select if it's a 'PU' flight";                }                break;            case "PU (TC)":            case "PU":            case "PU (DS)":            case "PU (BS)":            case "PU (LC)":            case "PU (TH. INS)":            case "PU (INS)":            case "PU (SEP)":                $lck = $form_data['LCK']['radio_buttons-action']['selected_option']['value'];                if (!empty($lck)) {                    switch ($lck) {                        case "iclck":                            $comments = "ICLCK";                            break;                        case "ilck":                            $comments = "ILCK";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select whether it's a ILCK, ICLCK or none";                }                break;        }        // Check the date is within range        $fechap = explode("-", $fecha);        $yy = $fechap[0];        $mm = $fechap[1];        $dd = $fechap[2];        $rosterlimitepoch = mktime(12, 0, 0, date("m"), date("d") + 30, date("y"));        $swaprequestepoch = mktime(12, 0, 0, $mm, $dd, $yy);        $swapnotedepoch = mktime(12, 0, 0, date("m"), date("d") + 12, date("y"));        $swaplimitbsepoch = mktime(12, 0, 0, date("m"), date("d") + 6, date("y"));        $todayepoch = mktime(12, 0, 0, date("m"), date("d"), date("y"));        switch (true) {            case ($swaprequestepoch >= $rosterlimitepoch): // If the date is +30 days                $err = "It is too soon for the day you have requested. Please try again at a later time";                break;            case (($rosterlimitepoch > $swaprequestepoch) && ($swaprequestepoch > $swapnotedepoch)): // If the date is between 13 and 30 days from now                break;            case (($swaprequestepoch < $swapnotedepoch) && ($swaprequestepoch >= $swaplimitbsepoch)): // If the date is between 6 and 12 days from today                $err = "\nIt might be too late for a swap. Please contact your Base Supervisor / Crew Control";                break;            case (($swaprequestepoch < $swaplimitbsepoch) && ($swaprequestepoch > $todayepoch)): // If the date is less than 6 days from today                $err = "\nIt is too late for a swap";                break;            case ($swaprequestepoch < $todayepoch): // The date being in the past                $err = "\nWhy do you put a date in the past?";                break;        }        // Check if the duty is valid        $dutysplits = explode("/", $duty, 3); // Separate the airports into their 3 letter codes, using the slashes (/) as a delimiter        foreach ($dutysplits as $airportcheck) {            $airportcheck = strtoupper($airportcheck); // Turn them into uppercase letters            switch ($airportcheck) {                case "HSBY": // It's a hsby, either earlies or lates.                case "AD": //It's an Airport Duty                    goto SkipDutyShort;            }            $sqlinsert = "INSERT INTO Airport_Check VALUES (?)"; // Create the query            $stmt = mysqli_prepare($conn, $sqlinsert);            mysqli_stmt_bind_param($stmt, "s", $airportcheck);            mysqli_stmt_execute($stmt);        }        unset($dutysplits, $airportcheck); // Unset the references for the next person who runs the script        mysqli_stmt_close($stmt);        // All values have been introduced into the temporary table        $sqlcompare = "SELECT Airport_Check.AirportCode AS AirportCode, CASE WHEN Airports.AirportCode IS NULL THEN 'Not valid' ELSE 'Valid' END AS Valid FROM Airport_Check LEFT JOIN Airports ON Airport_Check.AirportCode = Airports.AirportCode";        $result = mysqli_query($conn, $sqlcompare); // Run the comparison        while ($row = mysqli_fetch_assoc($result)) {            if ($row["Valid"] != 'Valid') {                $err .= "\n" . $row["AirportCode"] . " is an invalid airport :warning:"; // Display an error if the airport introduced isn't valid            }        }        $sqldel = "DELETE FROM Airport_Check"; // Delete the requests for checking whether the airports were valid or not        mysqli_query($conn, $sqldel);        SkipDutyShort:                /* DEBUG OUTPUT         * $debug_array = Array (         * 'Crewcode' => $crewcode,          'Fecha' => $fecha,          'Duty' => $duty,          'Comments' => $comments,          'Command' => 'Request',          'Shift' => $shift,          'Rank' => $rank,          'UserID' => $user_id,          );          $debug_string = print_r($debug_array, TRUE);          $debug_string .= "\n" . $err;          file_put_contents("TestOutput.txt", $debug_string);         */        // Now we will input the data into the database.        if (empty($err)) {            $sql = "INSERT INTO Swaps VALUES (?,?,?,?,'Request_Short',?,?,?,?,'')";            $stmt_insert = mysqli_prepare($conn, $sql);            mysqli_stmt_bind_param($stmt_insert, "ssssssss", $crewcode, $fecha, $duty, $comments, $shift, $rank, $user_id, $time);            mysqli_stmt_execute($stmt_insert);            if (mysqli_stmt_affected_rows($stmt_insert) < 1) {                $message = [                    'channel' => $user_id,                    'text' => "Your query was not processed because of the following error.\n" . mysqli_error($conn),                ];            } else {                $msg .= "\nYour request was successfully created :simple_smile:";                $message = [                    'channel' => $user_id,                    'text' => $msg                ];                mysqli_stmt_close($stmt_insert); // Close the statement            }        } else {            $err .= "\nPlease correct the errors above and try again";            $message = [                'channel' => $user_id,                'text' => $err            ];        }        $json = json_encode($message);        $slack_call = curl_init($slack_post_message);        curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");        curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json);        curl_setopt($slack_call, CURLOPT_CRLF, true);        curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);        curl_setopt($slack_call, CURLOPT_HTTPHEADER, [            "Content-Type: application/json",            "Authorization: Bearer " . $token,            "Content-Length: " . strlen($json)]        );        curl_exec($slack_call); // Store the result, in case there's any errors        // Clean up before we close the app        curl_close($slack_call);        mysqli_close($conn);        break;    case "Request for a flight":        // file_put_contents("Output.txt", print_r($form_data, true));        $desiredduty = $form_data['desired_duty']['input_desired_duty']['value'];        // Connect to the database and prepare a statement        $conn = mysqli_connect($servername, $username, $password, $dbname);        $sql = "SELECT Crewcode, Rank FROM Crew WHERE UserID = ?";        $stmt_exists = mysqli_prepare($conn, $sql);        mysqli_stmt_bind_param($stmt_exists, "s", $user_id);        mysqli_stmt_execute($stmt_exists);        $result_exists = mysqli_stmt_get_result($stmt_exists);        while ($row = mysqli_fetch_assoc($result_exists)) {            $crewcode = $row['Crewcode'];            $rank = $row['Rank'];        }        mysqli_stmt_close($stmt_exists);        // Check what rank is the person, and define the radio buttons in consequence        switch ($rank) {            case "JU (NEW)":            case "JU":                break;            case "JU (AH)":            case "JU (PU)":                $pu = $form_data['PU']['radio_buttons-action']['selected_option']['value'];                if (!empty($pu)) {                    switch ($pu) {                        case "yes":                            $comments = "No.1";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select if it's a 'PU' flight";                }                break;            case "PU (TC)":            case "PU":            case "PU (DS)":            case "PU (BS)":            case "PU (LC)":            case "PU (TH. INS)":            case "PU (INS)":            case "PU (SEP)":                $lck = $form_data['LCK']['radio_buttons-action']['selected_option']['value'];                if (!empty($lck)) {                    switch ($lck) {                        case "iclck":                            $comments = "ICLCK";                            break;                        case "ilck":                            $comments = "ILCK";                            break;                        case "no":                            $comments = "";                            break;                    }                } else {                    $err .= "Need to select whether it's a ILCK, ICLCK or none";                }                break;        }        // Check the date is within range        $fechap = explode("-", $fecha);        $yy = $fechap[0];        $mm = $fechap[1];        $dd = $fechap[2];        $rosterlimitepoch = mktime(12, 0, 0, date("m"), date("d") + 30, date("y"));        $swaprequestepoch = mktime(12, 0, 0, $mm, $dd, $yy);        $swapnotedepoch = mktime(12, 0, 0, date("m"), date("d") + 12, date("y"));        $swaplimitbsepoch = mktime(12, 0, 0, date("m"), date("d") + 6, date("y"));        $todayepoch = mktime(12, 0, 0, date("m"), date("d"), date("y"));        switch (true) {            case ($swaprequestepoch >= $rosterlimitepoch): // If the date is +30 days                $err = "It is too soon for the day you have requested. Please try again at a later time";                break;            case (($rosterlimitepoch > $swaprequestepoch) && ($swaprequestepoch > $swapnotedepoch)): // If the date is between 13 and 30 days from now                break;            case (($swaprequestepoch < $swapnotedepoch) && ($swaprequestepoch >= $swaplimitbsepoch)): // If the date is between 6 and 12 days from today                $err = "\nIt might be too late for a swap. Please contact your Base Supervisor / Crew Control";                break;            case (($swaprequestepoch < $swaplimitbsepoch) && ($swaprequestepoch > $todayepoch)): // If the date is less than 6 days from today                $err = "\nIt is too late for a swap";                break;            case ($swaprequestepoch < $todayepoch): // The date being in the past                $err = "\nWhy do you put a date in the past?";                break;        }        // Check if the duty is valid        $dutysplits = explode("/", $duty, 3); // Separate the airports into their 3 letter codes, using the slashes (/) as a delimiter        foreach ($dutysplits as $airportcheck) {            $airportcheck = strtoupper($airportcheck); // Turn them into uppercase letters            switch ($airportcheck) {                case "UNKNOWN": // You don't know the duty yet. In this case you'll still be allowed to process the swap, but if the date shows in the roster and the request is not updated, it will be deleted.                    $msg = "Your duty is unknown for the moment. Please remember to update this as soon as possible. Otherwise, your request will be deleted.";                case "HSBY": // It's a hsby, either earlies or lates.                case "AD": //It's an Airport Duty                    goto SkipDutyFlight;            }            $sqlinsert = "INSERT INTO Airport_Check VALUES (?)"; // Create the query            $stmt = mysqli_prepare($conn, $sqlinsert);            mysqli_stmt_bind_param($stmt, "s", $airportcheck);            mysqli_stmt_execute($stmt);        }        unset($airportcheck);        // Check if the desired duty is valid        $desireddutysplits = explode("/", $desiredduty, 3);        foreach ($desireddutysplits as $airportcheck) {            $airportcheck = strtoupper($airportcheck); // Turn them into uppercase letters            mysqli_stmt_bind_param($stmt, "s", $airportcheck);            mysqli_stmt_execute($stmt);        }        unset($dutysplits, $desireddutysplits, $airportcheck);        mysqli_stmt_close($stmt);        // All values have been introduced into the temporary table        $sqlcompare = "SELECT Airport_Check.AirportCode AS AirportCode, CASE WHEN Airports.AirportCode IS NULL THEN 'Not valid' ELSE 'Valid' END AS Valid FROM Airport_Check LEFT JOIN Airports ON Airport_Check.AirportCode = Airports.AirportCode";        $result_compare = mysqli_query($conn, $sqlcompare); // Run the comparison        while ($row = mysqli_fetch_assoc($result_compare)) {            if ($row["Valid"] != 'Valid') {                $err .= "\n" . $row["AirportCode"] . " is an invalid airport :warning:"; // Display an error if the airport introduced isn't valid           }        }        $sqldel = "DELETE FROM Airport_Check"; // Delete the requests for checking whether the airports were valid or not        mysqli_query($conn, $sqldel);        SkipDutyFlight:        /* The only thing left to check would be the shift.          * Since it is chosen and can't be written we don't need to compare it against anything.         * Now all that's left is to insert the values into the database for everyone else to see */        /* DEBUG OUTPUT          $debug_array = Array (          'Crewcode' => $crewcode,          'Fecha' => $fecha,          'Duty' => $duty,          'Comments' => $comments,          'Command' => 'Request',          'Shift' => $shift,          'Rank' => $rank,          'UserID' => $user_id,          );          $debug_string = print_r($debug_array, TRUE);          $debug_string .= "\n" . $err;          file_put_contents("TestOutput.txt", $debug_string);         */        if (empty($err)) {            $sql = "INSERT INTO Swaps VALUES (?,?,?,?,'Request_Flight',?,?,?,'00:00',?)";            $stmt_insert = mysqli_prepare($conn, $sql);            mysqli_stmt_bind_param($stmt_insert, "ssssssss", $crewcode, $fecha, $duty, $comments, $shift, $rank, $user_id, $desiredduty);            mysqli_stmt_execute($stmt_insert);            if (mysqli_stmt_affected_rows($stmt_insert) < 1) {                $message = [                    'channel' => $user_id,                    'text' => "Your query was not processed because of the following error.\n" . mysqli_error($conn),                ];            } else {                $msg .= "\nYour request was successfully created :simple_smile:";                $message = [                    'channel' => $user_id,                    'text' => $msg                ];                mysqli_stmt_close($stmt_insert); // Close the statement            }        } else {            $err .= "\nPlease correct the errors above and try again";            $message = [                'channel' => $user_id,                'text' => $err            ];        }        $json = json_encode($message);        $slack_call = curl_init($slack_post_message);        curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");        curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json);        curl_setopt($slack_call, CURLOPT_CRLF, true);        curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);        curl_setopt($slack_call, CURLOPT_HTTPHEADER, [            "Content-Type: application/json",            "Authorization: Bearer " . $token,            "Content-Length: " . strlen($json)]        );        curl_exec($slack_call); // Store the result, in case there's any errors                // Clean up before we close the app        curl_close($slack_call);        mysqli_close($conn);        break;}?>