<?php$user_agent = "SwapBot SwapsList 4.1/23.jonathantadeoleiva@gmail.com";require '../../etc/Env.php'; // Require the environmental variables file// First verify that the request comes from Slack by using the signing secret hash$headers = getallheaders();$raw_body = file_get_contents('php://input');$body = json_decode($raw_body, true);$x_slack_signature = $headers["X-Slack-Signature"];$x_slack_timestamp = $headers["X-Slack-Request-Timestamp"];$version = "v0";$channel_id = $_POST['channel_id'];$user_id = $_POST['user_id'];// Check if the timestamp from Slack and the actual time differ in more than 300s (5min). If so, discard this messageif (abs($x_slack_timestamp - time()) > 300) {    header("HTTP/1.1 400 Bad Request", true, 400);    $err = "Not a valid request. Discarding this message";    die($err);}/*  For computing the signature, I need the following:  1. $version  2. $x_slack_timestamp  3. $raw_body  All of them appended to each other with a colon (:)*/$signature_base_string = $version . ":" . $x_slack_timestamp . ":" . $raw_body;$hash_signature = "v0=" . hash_hmac('sha256', $signature_base_string, $slack_signing_secret);if (!hash_equals($x_slack_signature, $hash_signature)) {    header("HTTP/1.1 400 Bad Request", true, 400);    $err = "Not a valid request. Discarding";    die($err);}// Take user input and parse it accordingly$shift = ucfirst(strtolower($_POST['text']));//Initialize the err and msg variables$msg = '';$err = '';// die ("No swaps allowed until further notice :mask:");// Connect to the database$conn = mysqli_connect($servername, $username, $password, $dbname);if (mysqli_error($conn)) {    die("Connection failed: " . mysqli_error($conn) . ":x::earth_africa:");}// Create parametrized query, execute and get the results$sql = "SELECT Crewcode, Base, Rank FROM Crew WHERE UserID = ?";$stmt_base = mysqli_prepare($conn, $sql);mysqli_stmt_bind_param($stmt_base, "s", $user_id);mysqli_stmt_execute($stmt_base);$result_base = mysqli_stmt_get_result($stmt_base);while ($row = mysqli_fetch_assoc($result_base)) {    if ($row['Base'] != 'DUB') {        $err .= "You're not based in DUB at the moment. You're currently in " . $row['Base'];    }    $crewcode = $row['Crewcode'];    $rank = $row['Rank'];}// Close statement, but leave connection open for the next one, since there will be a next statementmysqli_stmt_close($stmt_base);switch ($shift) { // Check what the shift is    case "E":    case "Earlies":        $sqlshift = " AND Shift='Earlies'";        $shift = "earlies";        break;    case "L":    case "Lates":        $sqlshift = " AND Shift='Lates'";        $shift = "lates";        break;    case "":        $sqlshift = "";        $shift = "earlies and lates";        break;    case "D":    case "Delete":        // Connect to the database, then recover your list of swaps        $conn = mysqli_connect($servername, $username, $password, $dbname);        if (mysqli_error($conn)) {            die("Connection failed: " . mysqli_error($conn) . ":x::earth_africa:");        }        $stmt_swaps = mysqli_prepare($conn, "SELECT * FROM Swaps WHERE UserID = ? AND Command LIKE 'Request%' ORDER BY Day ASC");        mysqli_stmt_bind_param($stmt_swaps, "s", $user_id);        mysqli_stmt_execute($stmt_swaps);        $result_swaps = mysqli_stmt_get_result($stmt_swaps);        if (mysqli_affected_rows($conn) > 0) {            $i = 0;            while ($row_swaps = mysqli_fetch_assoc($result_swaps)) {                switch ($row_swaps['Command']) {                    case "Request_Off":                        $swaps[$i] = [                            'type' => 'section',                            'text' => [                                'type' => 'mrkdwn',                                'text' => $i + 1 . ". Swap on the " . $row_swaps["Day"] . ". You were doing " . $row_swaps["Duty"] . " on " . $row_swaps["Shift"] . ". Comments / info: " . $row_swaps["Comments"],                            ],                            'accessory' => [                                'type' => 'button',                                'text' => [                                    'type' => 'plain_text',                                    'text' => 'Delete',                                    'emoji' => false,                                ],                                'value' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                'style' => 'danger',                                'action_id' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                            ],                        ];                        $i++;                        break;                    case "Request_Short":                        if ($row_swaps["Shift"] == "Earlies") {                            $swaps[$i] = [                                'type' => 'section',                                'text' => [                                    'type' => 'mrkdwn',                                    'text' => $i + 1 . ". You wanted a shorter day on the " . $row_swaps["Day"] . ". You were operating " . $row_swaps["Duty"] . " and wanted to finish by " . $row_swaps["MaxTime"],                                ],                                'accessory' => [                                    'type' => 'button',                                    'text' => [                                        'type' => 'plain_text',                                        'text' => 'Delete',                                        'emoji' => false,                                    ],                                    'value' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                    'style' => 'danger',                                    'action_id' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                ],                            ];                        } else {                            $swaps[$i] = [                                'type' => 'section',                                'text' => [                                    'type' => 'mrkdwn',                                    'text' => $i + 1 . ". You wanted a shorter day on the " . $row_swaps["Day"] . ". You were operating " . $row_swaps["Duty"] . " and wanted to start by " . $row_swaps["MaxTime"],                                ],                                'accessory' => [                                    'type' => 'button',                                    'text' => [                                        'type' => 'plain_text',                                        'text' => 'Delete',                                        'emoji' => false,                                    ],                                    'value' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                    'style' => 'danger',                                    'action_id' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                ],                            ];                        }                        $i++;                        break;                    case "Request_Flight":                        $swaps[$i] = [                            'type' => 'section',                            'text' => [                                'type' => 'mrkdwn',                                'text' => $i + 1 . ". Swap on the " . $row_swaps["Day"] . ". You were doing " . $row_swaps["Duty"] . " on " . $row_swaps["Shift"] . ", but you wanted to operate " . $row_swaps["RequestedFlight"],                            ],                            'accessory' => [                                'type' => 'button',                                'text' => [                                    'type' => 'plain_text',                                    'text' => 'Delete',                                    'emoji' => false,                                ],                                'value' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                                'style' => 'danger',                                'action_id' => 'swap-delete_' . $row_swaps["Day"] . "_" . $row_swaps["Crewcode"],                            ],                        ];                        $i++;                        break;                }            }        } else {            die("You haven't asked for any swaps at the moment");        }        $i = 0;        $message_array = [            'token' => $token,            'channel' => $channel_id,            'user' => $user_id,            'blocks' => [                0 => [                    'type' => 'header',                    'text' => [                        'type' => 'plain_text',                        'text' => 'Here are the swaps you have requested',                        'emoji' => false,                    ],                ],            ],        ];        while (current($swaps)) {            array_push($message_array['blocks'], $swaps[$i]);            next($swaps);            $i++;        }        $json_string = json_encode($message_array); // Encode JSON data        // Start the cURL request to the ephemeral messages API        $slack_message = curl_init($slack_post_ephemeral);        curl_setopt($slack_message, CURLOPT_CUSTOMREQUEST, "POST");        curl_setopt($slack_message, CURLOPT_POSTFIELDS, $json_string);        curl_setopt($slack_message, CURLOPT_CRLF, true);        curl_setopt($slack_message, CURLOPT_RETURNTRANSFER, true);        curl_setopt($slack_message, CURLOPT_HTTPHEADER, [            "Content-Type: application/json",            "Authorization: Bearer " . $token,            "Content-Length: " . strlen($json_string)]        );        $result_curl = curl_exec($slack_message); // Store the result, in case there's any errors        curl_close($slack_message); // Close the curl connection        mysqli_stmt_close($stmt_swaps);        mysqli_close($conn);        return;    default:        $err = "You can only choose between early and late shifts.\nIf you *do not* have a preference, please leave the field blank";        break;}switch ($rank) { // Check what the rank is    case "JU (NEW)":    case "JU":        $sqlrank = " AND Rank IN ('JU', 'JU (PU)', 'JU (AH)') AND Comments NOT LIKE '%No.1%'";        // Recover JU and JU (PU) swaps in which the comments do not contain "No.1"        break;    case "JU (AH)":    case "JU (PU)":        $sqlrank = " AND (Comments NOT LIKE '%LCK%')";        // Recover all swaps in which the comments do not contain LCK. There are two codes: ILCK or ICLCK. None of them can be done by ad-hocs        break;    case "PU (TC)":    case "PU (BS)":    case "PU (DS)":    case "PU":        $sqlrank = " AND (((Rank IN ('JU (PU)','JU (AH)') AND Comments LIKE '%No.1') OR (Rank LIKE 'PU%' AND Comments NOT LIKE '%ILCK%')))";        // Recover all swaps from JU (PU) or JU (AH) that contain "No.1" in the comments and all swaps from any PU rank that DO NOT contain ILCK in the comments, since not all PU are able to do them        break;    case "PU (LC)":    case "PU (TH. INS)":    case "PU (INS)":    case "PU (SEP)":        $sqlrank = " AND (Rank LIKE 'PU%') OR (Rank IN ('JU (PU)','JU (AH)') AND Comments LIKE '%No.1%')";        // This is the easiest one. From PU (LC) onwards they can do any No.1 flight. I wanted to find a way to sort them out in this case as to prioritize flights in which they're really needed, but I don't know any way yet        break;}if (!empty($err)) {    die($err);}// Now we create the query we will send to the database, including parameters$sqlquery1 = "SELECT * FROM Swaps WHERE Command LIKE 'Request%' AND UserID != ?";// First part of all queries. What this part does is: Select all the entries in which the command is "Request" and that DO NOT match your UserID (for obvious reasons)$sqlquery2 = " ORDER BY Day ASC"; // End of all queries (orders by date; closest ones first)$sqlqueryfinal = $sqlquery1 . $sqlshift . $sqlrank . $sqlquery2; // Final query// Create prepared statement, bind values to it and execute. Then retrieve the results, close the statement and the connection to the database to free resources$stmt = mysqli_prepare($conn, $sqlqueryfinal);mysqli_stmt_bind_param($stmt, "s", $user_id);mysqli_stmt_execute($stmt);$result = mysqli_stmt_get_result($stmt);// Now we work on the message that we're going to display to the userif ((mysqli_affected_rows($conn)) > 0) {// Use the result of the query to display the swap requests.    while ($row = mysqli_fetch_assoc($result)) {        if ($row["Command"] == "Request_Off") {            $msg .= "<@" . $row["UserID"] . "> needs a swap on the " . $row["Day"] . ". The duty is " . $row["Duty"] . " on " . strtolower($row["Shift"]) . ". Comments: " . $row["Comments"] . "\n";        } else {            if ($row["Shift"] == "Earlies") {                $msg .= "<@" . $row["UserID"] . "> needs a shorter day on the " . $row["Day"] . ". The duty is " . $row["Duty"] . " on earlies. They would like to finish at " . $row["MaxTime"] . ". Comments: " . $row["Comments"] . "\n";            } else {                $msg .= "<@" . $row["UserID"] . "> needs a shorter day on the " . $row["Day"] . ". The duty is " . $row["Duty"] . " on lates. They would like to start at " . $row["MaxTime"] . ". Comments: " . $row["Comments"] . "\n";            }        }    }} else {    $err = ":warning: No swaps pending matched your criteria";    die($err);}// Define a JSON string for the ephemeral message$json_data_array = [    "token" => $token,    "channel" => $channel_id,    "user" => $user_id,    "blocks" => [        0 => [            'type' => 'header',            'text' => [                'type' => 'plain_text',                'text' => 'Here\'s the list of swaps for ' . $rank . ' on ' . $shift,                'emoji' => false,            ],        ],        1 => [            'type' => 'section',            'text' => [                'type' => 'mrkdwn',                'text' => $msg,            ],        ],        2 => [            'type' => 'divider',        ],        3 => [            'type' => 'section',            'text' => [                'type' => 'mrkdwn',                'text' => '_(Just tap on the name of the person whose swap you want to resolve and then "Message")_',            ],        ],    ],];$json_string = json_encode($json_data_array); // Encode JSON data// Start the cURL request to the ephemeral messages API$slack_call = curl_init($slack_post_ephemeral);curl_setopt($slack_call, CURLOPT_CUSTOMREQUEST, "POST");curl_setopt($slack_call, CURLOPT_POSTFIELDS, $json_string);curl_setopt($slack_call, CURLOPT_CRLF, true);curl_setopt($slack_call, CURLOPT_RETURNTRANSFER, true);curl_setopt($slack_call, CURLOPT_HTTPHEADER, [    "Content-Type: application/json",    "Authorization: Bearer " . $token,    "Content-Length: " . strlen($json_string)]);$result_curl = curl_exec($slack_call); // Store the result, in case there's any errorscurl_close($slack_call); // Close the curl connectionmysqli_stmt_close($stmt);mysqli_close($conn);?>